namespace ACCRPMMonitor;

using ScottPlot;

// Generates visual power curve graphs for auto-generated configurations
public static class PwrCrvGraphGen
{
    // Generates a PNG image showing acceleration curves and gear ratios
    public static string GenerateGraph(GearRPMConfig config, string vehicleName, string outputDir)
    {
        if (!config.IsAutoGenerated || config.AccelerationCurves.Count == 0)
        {
            throw new InvalidOperationException("Can only generate graphs for auto-generated configs with acceleration data");
        }

        // Ensure output directory exists
        Directory.CreateDirectory(outputDir);

        // Create the plot
        var plot = new Plot();

        // Configure plot appearance
        plot.Title($"{vehicleName} - Power Curve Analysis");
        plot.XLabel("RPM");
        plot.YLabel("Acceleration (m/s²)");
        plot.Legend.IsVisible = true;

        // Color palette for gears
        Color[] gearColors =
        {
            Colors.Red,
            Colors.Orange,
            Colors.Yellow,
            Colors.Green,
            Colors.Blue,
            Colors.Purple
        };

        // Only plot gears 1-6
        var gearsToPlot = config.AccelerationCurves
            .Where(kvp => kvp.Key >= 1 && kvp.Key <= 6)
            .OrderBy(kvp => kvp.Key)
            .ToList();

        if (gearsToPlot.Count == 0)
        {
            throw new InvalidOperationException("No acceleration data available for gears 1-6");
        }

        // Plot each gear's acceleration curve
        for (int i = 0; i < gearsToPlot.Count; i++)
        {
            var gear = gearsToPlot[i].Key;
            var accelData = gearsToPlot[i].Value;

            // Sort by RPM
            var sortedData = accelData.OrderBy(kvp => kvp.Key).ToList();

            double[] rpms = sortedData.Select(kvp => (double)kvp.Key).ToArray();
            double[] accels = sortedData.Select(kvp => (double)kvp.Value).ToArray();

            // Add scatter plot with lines for this gear
            var scatter = plot.Add.Scatter(rpms, accels);
            scatter.LegendText = $"Gear {gear}";
            scatter.Color = gearColors[i % gearColors.Length];
            scatter.LineWidth = 2;
            scatter.MarkerSize = 3;

            // Add optimal shift point marker if available
            if (config.GearRPMThresholds.TryGetValue(gear, out int shiftRPM))
            {
                // Find acceleration at shift point
                var closestRPM = accelData.Keys
                    .OrderBy(rpm => Math.Abs(rpm - shiftRPM))
                    .FirstOrDefault();

                if (closestRPM > 0 && accelData.TryGetValue(closestRPM, out float shiftAccel))
                {
                    var marker = plot.Add.Marker(shiftRPM, shiftAccel);
                    marker.Color = gearColors[i % gearColors.Length];
                    marker.Size = 10;
                    marker.Shape = MarkerShape.FilledDiamond;
                }
            }
        }

        // Add gear ratio information as text annotation
        if (config.GearRatios.Count > 0)
        {
            var ratioText = "Gear Ratios:\n";
            foreach (var kvp in config.GearRatios.Where(g => g.Key >= 1 && g.Key <= 6).OrderBy(x => x.Key))
            {
                ratioText += $"  {kvp.Key}→{kvp.Key + 1}: {kvp.Value:F3}\n";
            }

            var annotation = plot.Add.Annotation(ratioText);
            annotation.LabelFontSize = 11;
            annotation.LabelBackgroundColor = Colors.White.WithAlpha(0.9);
            annotation.LabelBorderColor = Colors.Black;
            annotation.LabelBorderWidth = 1;
            annotation.OffsetX = 10;
            annotation.OffsetY = 10;
        }

        // Set reasonable axis limits
        plot.Axes.AutoScale();
        plot.Axes.Margins(0.05, 0.15); // Add some margin, especially on right for legend

        // Generate filename with timestamp
        string timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
        string filename = $"{vehicleName}_PowerCurve_{timestamp}.png";
        string fullPath = Path.Combine(outputDir, filename);

        // Save the plot as PNG (1920x1080 for good quality)
        plot.SavePng(fullPath, 1920, 1080);

        return fullPath;
    }

    // Alternative method to generate a simpler graph without optimal shift markers
    public static string GenerateSimpleGraph(Dictionary<int, Dictionary<int, float>> accelerationCurves,
                                             Dictionary<int, float> gearRatios,
                                             string vehicleName,
                                             string outputDir)
    {
        // Ensure output directory exists
        Directory.CreateDirectory(outputDir);

        // Create the plot
        var plot = new Plot();

        // Configure plot appearance
        plot.Title($"{vehicleName} - Acceleration Curves");
        plot.XLabel("RPM");
        plot.YLabel("Acceleration (m/s²)");
        plot.Legend.IsVisible = true;

        // Color palette for gears
        Color[] gearColors =
        {
            Colors.Red,
            Colors.Orange,
            Colors.Yellow,
            Colors.Green,
            Colors.Blue,
            Colors.Purple
        };

        // Only plot gears 1-6
        var gearsToPlot = accelerationCurves
            .Where(kvp => kvp.Key >= 1 && kvp.Key <= 6)
            .OrderBy(kvp => kvp.Key)
            .ToList();

        // Plot each gear's acceleration curve
        for (int i = 0; i < gearsToPlot.Count; i++)
        {
            var gear = gearsToPlot[i].Key;
            var accelData = gearsToPlot[i].Value;

            // Sort by RPM
            var sortedData = accelData.OrderBy(kvp => kvp.Key).ToList();

            double[] rpms = sortedData.Select(kvp => (double)kvp.Key).ToArray();
            double[] accels = sortedData.Select(kvp => (double)kvp.Value).ToArray();

            // Add scatter plot with lines for this gear
            var scatter = plot.Add.Scatter(rpms, accels);
            scatter.LegendText = $"Gear {gear}";
            scatter.Color = gearColors[i % gearColors.Length];
            scatter.LineWidth = 2;
            scatter.MarkerSize = 3;
        }

        // Add gear ratio information
        if (gearRatios.Count > 0)
        {
            var ratioText = "Gear Ratios:\n";
            foreach (var kvp in gearRatios.Where(g => g.Key >= 1 && g.Key <= 6).OrderBy(x => x.Key))
            {
                ratioText += $"  {kvp.Key}→{kvp.Key + 1}: {kvp.Value:F3}\n";
            }

            var annotation = plot.Add.Annotation(ratioText);
            annotation.LabelFontSize = 11;
            annotation.LabelBackgroundColor = Colors.White.WithAlpha(0.9);
            annotation.LabelBorderColor = Colors.Black;
            annotation.LabelBorderWidth = 1;
            annotation.OffsetX = 10;
            annotation.OffsetY = 10;
        }

        // Set reasonable axis limits
        plot.Axes.AutoScale();
        plot.Axes.Margins(0.05, 0.15);

        // Generate filename with timestamp
        string timestamp = DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss");
        string filename = $"{vehicleName}_PowerCurve_{timestamp}.png";
        string fullPath = Path.Combine(outputDir, filename);

        // Save the plot
        plot.SavePng(fullPath, 1920, 1080);

        return fullPath;
    }
}
