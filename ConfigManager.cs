using System.Text.Json;

namespace ACCRPMMonitor;

// Handles loading and saving of per-vehicle RPM configs (both manual and auto)
public class ConfigManager
{
    private readonly string _configsDirectory;
    private string _currentVehicleName;
    private static readonly JsonSerializerOptions JsonOptions = new()
    {
        WriteIndented = true
    };

    public ConfigMode CurrentMode { get; private set; } = ConfigMode.Manual;

    public ConfigManager(string vehicleName = "default")
    {
        // Store configs in AppData\Local\ACCRPMMonitor\powercurves
        string appDataPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
        string appFolder = Path.Combine(appDataPath, "ACCRPMMonitor");
        _configsDirectory = Path.Combine(appFolder, "powercurves");

        Directory.CreateDirectory(_configsDirectory);

        _currentVehicleName = vehicleName;
    }

    // Loads config from file based on current mode
    public GearRPMConfig LoadConfig()
    {
        string configFilePath = GetConfigPath(_currentVehicleName, CurrentMode);

        try
        {
            if (File.Exists(configFilePath))
            {
                string json = File.ReadAllText(configFilePath);
                var config = JsonSerializer.Deserialize<GearRPMConfig>(json);

                if (config != null)
                {
                    Console.WriteLine($"Configuration loaded from: {configFilePath}");
                    return config;
                }
            }

            // No config found - create default based on mode
            Console.WriteLine($"No configuration found. Creating default at: {configFilePath}");
            var defaultConfig = GearRPMConfig.CreateDefault();
            SaveConfig(defaultConfig);
            return defaultConfig;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading configuration: {ex.Message}");
            Console.WriteLine("Using default configuration.");
            return GearRPMConfig.CreateDefault();
        }
    }

    // Saves config to file based on current mode
    public bool SaveConfig(GearRPMConfig config)
    {
        try
        {
            string configFilePath = GetConfigPath(_currentVehicleName, CurrentMode);
            string json = JsonSerializer.Serialize(config, JsonOptions);
            File.WriteAllText(configFilePath, json);
            Console.WriteLine($"Configuration saved to: {configFilePath}");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving configuration: {ex.Message}");
            return false;
        }
    }

    // Saves auto-generated config specifically
    public bool SaveAutoConfig(GearRPMConfig config)
    {
        try
        {
            string configFilePath = GetConfigPath(_currentVehicleName, ConfigMode.Auto);
            config.IsAutoGenerated = true;
            config.LastUpdated = DateTime.Now;
            string json = JsonSerializer.Serialize(config, JsonOptions);
            File.WriteAllText(configFilePath, json);
            Console.WriteLine($"Auto configuration saved to: {configFilePath}");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving auto configuration: {ex.Message}");
            return false;
        }
    }

    // Checks if auto config exists for current vehicle
    public bool HasAutoConfig()
    {
        return File.Exists(GetConfigPath(_currentVehicleName, ConfigMode.Auto));
    }

    // Sets the configuration mode
    public void SetMode(ConfigMode mode)
    {
        CurrentMode = mode;
    }

    public string ConfigFilePath => GetConfigPath(_currentVehicleName, CurrentMode);

    private string GetConfigPath(string vehicleName, ConfigMode mode)
    {
        string suffix = mode == ConfigMode.Auto ? "_auto" : "";
        return Path.Combine(_configsDirectory, $"{vehicleName}{suffix}.json");
    }

    public string CurrentVehicleName => _currentVehicleName;

    public void SetVehicle(string vehicleName)
    {
        _currentVehicleName = vehicleName;
    }

    // Lists all available vehicle configs in the directory
    public List<string> GetAvailableVehicles()
    {
        var files = Directory.GetFiles(_configsDirectory, "*.json");
        var vehicles = files
            .Select(f => Path.GetFileNameWithoutExtension(f))
            .Where(name => !name.EndsWith("_auto")) // Exclude auto configs from list
            .Select(name => name.Replace("_auto", ""))
            .Distinct()
            .OrderBy(n => n)
            .ToList();

        return vehicles;
    }

    public bool DeleteVehicle(string vehicleName)
    {
        try
        {
            // Delete both manual and auto configs
            string manualPath = GetConfigPath(vehicleName, ConfigMode.Manual);
            string autoPath = GetConfigPath(vehicleName, ConfigMode.Auto);

            bool deleted = false;
            if (File.Exists(manualPath))
            {
                File.Delete(manualPath);
                deleted = true;
            }
            if (File.Exists(autoPath))
            {
                File.Delete(autoPath);
                deleted = true;
            }

            return deleted;
        }
        catch
        {
            return false;
        }
    }

    public bool VehicleExists(string vehicleName)
    {
        return File.Exists(GetConfigPath(vehicleName, ConfigMode.Manual));
    }
}

// Configuration mode enum
public enum ConfigMode
{
    Manual,  // User-defined RPM values
    Auto     // Auto-generated optimal values
}
