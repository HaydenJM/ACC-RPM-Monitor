namespace ACCRPMMonitor;

// Stores RPM shift points for each gear
public class GearRPMConfig
{
    // Maps gear number (1-8) to the RPM where you should upshift
    public Dictionary<int, int> GearRPMThresholds { get; set; } = new();

    // Metadata for auto-generated configs
    public bool IsAutoGenerated { get; set; } = false;
    public DateTime? LastUpdated { get; set; }
    public int TotalDataPoints { get; set; } = 0;
    public Dictionary<int, float> DataConfidence { get; set; } = new();

    // Creates a default config with reasonable RPM values
    public static GearRPMConfig CreateDefault()
    {
        return new GearRPMConfig
        {
            GearRPMThresholds = new Dictionary<int, int>
            {
                { 1, 6000 },
                { 2, 6500 },
                { 3, 7000 },
                { 4, 7000 },
                { 5, 7000 },
                { 6, 7000 },
                { 7, 7000 },
                { 8, 7000 }
            },
            IsAutoGenerated = false
        };
    }

    // Creates config from optimal shift analyzer results
    public static GearRPMConfig FromOptimalConfig(OptimalShiftConfig optimalConfig)
    {
        var config = new GearRPMConfig
        {
            GearRPMThresholds = new Dictionary<int, int>(optimalConfig.OptimalUpshiftRPM),
            IsAutoGenerated = true,
            LastUpdated = optimalConfig.LastUpdated,
            TotalDataPoints = optimalConfig.TotalDataPoints,
            DataConfidence = new Dictionary<int, float>(optimalConfig.DataConfidence)
        };
        return config;
    }

    public int GetRPMForGear(int gear)
    {
        return GearRPMThresholds.TryGetValue(gear, out var rpm) ? rpm : 0;
    }

    public void SetRPMForGear(int gear, int rpm)
    {
        GearRPMThresholds[gear] = rpm;
    }

    // Gets confidence for a specific gear (0.0 to 1.0)
    public float GetConfidenceForGear(int gear)
    {
        return DataConfidence.TryGetValue(gear, out var confidence) ? confidence : 0f;
    }
}
